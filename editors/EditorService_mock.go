// Code generated by mockery v2.46.3. DO NOT EDIT.

package editors

import (
	common "github.com/MehrunesSky/gecrets/common"
	mock "github.com/stretchr/testify/mock"
)

// MockEditorService is an autogenerated mock type for the EditorService type
type MockEditorService struct {
	mock.Mock
}

// Open provides a mock function with given fields: secrets
func (_m *MockEditorService) Open(secrets common.SecretIs) {
	_m.Called(secrets)
}

// Update provides a mock function with given fields: secrets
func (_m *MockEditorService) Update(secrets common.SecretIs) common.SecretIs {
	ret := _m.Called(secrets)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 common.SecretIs
	if rf, ok := ret.Get(0).(func(common.SecretIs) common.SecretIs); ok {
		r0 = rf(secrets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.SecretIs)
		}
	}

	return r0
}

// NewMockEditorService creates a new instance of MockEditorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEditorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEditorService {
	mock := &MockEditorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
