// Code generated by mockery v2.46.3. DO NOT EDIT.

package keyvaults

import (
	common "github.com/MehrunesSky/gecrets/common"
	mock "github.com/stretchr/testify/mock"
)

// MockKeyVaultService is an autogenerated mock type for the KeyVaultService type
type MockKeyVaultService struct {
	mock.Mock
}

// GetSecretIds provides a mock function with given fields:
func (_m *MockKeyVaultService) GetSecretIds() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecretIds")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetSecretModel provides a mock function with given fields:
func (_m *MockKeyVaultService) GetSecretModel() common.SecretI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecretModel")
	}

	var r0 common.SecretI
	if rf, ok := ret.Get(0).(func() common.SecretI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.SecretI)
		}
	}

	return r0
}

// GetSecretValue provides a mock function with given fields: id
func (_m *MockKeyVaultService) GetSecretValue(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecrets provides a mock function with given fields: getSecretOption
func (_m *MockKeyVaultService) GetSecrets(getSecretOption *GetSecretsOption) (common.SecretIs, error) {
	ret := _m.Called(getSecretOption)

	if len(ret) == 0 {
		panic("no return value specified for GetSecrets")
	}

	var r0 common.SecretIs
	var r1 error
	if rf, ok := ret.Get(0).(func(*GetSecretsOption) (common.SecretIs, error)); ok {
		return rf(getSecretOption)
	}
	if rf, ok := ret.Get(0).(func(*GetSecretsOption) common.SecretIs); ok {
		r0 = rf(getSecretOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.SecretIs)
		}
	}

	if rf, ok := ret.Get(1).(func(*GetSecretsOption) error); ok {
		r1 = rf(getSecretOption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSecretValue provides a mock function with given fields: secretI
func (_m *MockKeyVaultService) SetSecretValue(secretI common.SecretI) error {
	ret := _m.Called(secretI)

	if len(ret) == 0 {
		panic("no return value specified for SetSecretValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.SecretI) error); ok {
		r0 = rf(secretI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockKeyVaultService creates a new instance of MockKeyVaultService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyVaultService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyVaultService {
	mock := &MockKeyVaultService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
