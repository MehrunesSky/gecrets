// Code generated by mockery v2.46.3. DO NOT EDIT.

package azure

import (
	context "context"

	azsecrets "github.com/Azure/azure-sdk-for-go/sdk/keyvault/azsecrets"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// GetSecret provides a mock function with given fields: ctx, name, version, options
func (_m *mockClient) GetSecret(ctx context.Context, name string, version string, options *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error) {
	ret := _m.Called(ctx, name, version, options)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 azsecrets.GetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error)); ok {
		return rf(ctx, name, version, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azsecrets.GetSecretOptions) azsecrets.GetSecretResponse); ok {
		r0 = rf(ctx, name, version, options)
	} else {
		r0 = ret.Get(0).(azsecrets.GetSecretResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *azsecrets.GetSecretOptions) error); ok {
		r1 = rf(ctx, name, version, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewListSecretsPager provides a mock function with given fields: options
func (_m *mockClient) NewListSecretsPager(options *azsecrets.ListSecretsOptions) *runtime.Pager[azsecrets.ListSecretsResponse] {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for NewListSecretsPager")
	}

	var r0 *runtime.Pager[azsecrets.ListSecretsResponse]
	if rf, ok := ret.Get(0).(func(*azsecrets.ListSecretsOptions) *runtime.Pager[azsecrets.ListSecretsResponse]); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Pager[azsecrets.ListSecretsResponse])
		}
	}

	return r0
}

// SetSecret provides a mock function with given fields: todo, key, parameters, options
func (_m *mockClient) SetSecret(todo context.Context, key string, parameters azsecrets.SetSecretParameters, options *azsecrets.SetSecretOptions) (azsecrets.SetSecretResponse, error) {
	ret := _m.Called(todo, key, parameters, options)

	if len(ret) == 0 {
		panic("no return value specified for SetSecret")
	}

	var r0 azsecrets.SetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, azsecrets.SetSecretParameters, *azsecrets.SetSecretOptions) (azsecrets.SetSecretResponse, error)); ok {
		return rf(todo, key, parameters, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, azsecrets.SetSecretParameters, *azsecrets.SetSecretOptions) azsecrets.SetSecretResponse); ok {
		r0 = rf(todo, key, parameters, options)
	} else {
		r0 = ret.Get(0).(azsecrets.SetSecretResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, azsecrets.SetSecretParameters, *azsecrets.SetSecretOptions) error); ok {
		r1 = rf(todo, key, parameters, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
